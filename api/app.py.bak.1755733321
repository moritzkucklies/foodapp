from fastapi.responses import RedirectResponse
import os, uuid, json, pathlib
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import HTMLResponse
from starlette.middleware.cors import CORSMiddleware
import redis

REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/0")
UPLOAD_DIR = pathlib.Path(os.getenv("UPLOAD_DIR", "/home/pi/uploads")).resolve()
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

r = redis.Redis.from_url(REDIS_URL, decode_responses=True)

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/test", response_class=HTMLResponse)
def test_form():
    return """
    <html><body>
    <h3>Upload-Test</h3>
    <form action="/v1/upload" method="post" enctype="multipart/form-data">
      <input type="file" name="image" accept="image/*"/>
      <button type="submit">Hochladen</button>
    </form>
    </body></html>
    """

@app.post("/v1/upload")
async def upload(image: UploadFile = File(...)):
    if not image.content_type or not image.content_type.startswith("image/"):
        raise HTTPException(status_code=400, detail="Bitte ein Bild hochladen.")

    job_id = str(uuid.uuid4())
    ext = {
        "image/jpeg": ".jpg",
        "image/png": ".png",
        "image/webp": ".webp",
        "image/heic": ".heic",
        "image/heif": ".heif",
    }.get(image.content_type, ".bin")

    out_path = (UPLOAD_DIR / f"{job_id}{ext}").as_posix()

    data = await image.read()
    with open(out_path, "wb") as f:
        f.write(data)

    job = {"job_id": job_id, "path": out_path, "content_type": image.content_type}
    r.lpush("jobs", json.dumps(job))

    return {"job_id": job_id}

@app.get("/v1/result/{job_id}")
def result(job_id: str):
    key = f"result:{job_id}"
    data = r.get(key)
    if not data:
        return {"status": "pending"}
    try:
        return json.loads(data)
    except Exception:
        return {"status": "error", "detail": "Invalid result payload"}
@app.get("/", include_in_schema=False)
def root():
    return RedirectResponse("/docs")
